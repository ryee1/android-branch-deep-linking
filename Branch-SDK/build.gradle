apply plugin: 'com.android.library'

//File name for out put jar created
def jarFileName

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    compile 'com.android.support:support-annotations:22.2.0'
    compile 'com.crashlytics.sdk.android:answers-shim:0.0.6'
}

android {
    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
    
    defaultConfig {
        minSdkVersion 15
        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
        versionName project.VERSION_NAME
        versionCode Integer.parseInt(project.VERSION_CODE)
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['resources']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
}

//------------- Jar Generation code. ---------------//
//Run makeJar to create a jar file for SDK to the route directory
android {
    lintOptions {
        abortOnError false
    }
}

task clearJar(type: Delete) {
    delete 'build/libs/'+ jarFileName
}

task makeJar(type: Copy) {
    from('build/intermediates/bundles/release/')
    into('../')
    include('classes.jar')
    rename ('classes.jar', 'Branch-'+project.VERSION_NAME+'.jar')
}

makeJar.dependsOn(clearJar, build)


